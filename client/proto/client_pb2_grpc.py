# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import client_pb2 as client__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in client_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientServiceStub(object):
    """Client API service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutPrice = channel.unary_unary(
                '/client.ClientService/PutPrice',
                request_serializer=client__pb2.PutPriceRequest.SerializeToString,
                response_deserializer=client__pb2.PutPriceResponse.FromString,
                _registered_method=True)
        self.BatchPutPrice = channel.unary_unary(
                '/client.ClientService/BatchPutPrice',
                request_serializer=client__pb2.BatchPutPriceRequest.SerializeToString,
                response_deserializer=client__pb2.BatchPutPriceResponse.FromString,
                _registered_method=True)
        self.GetPrice = channel.unary_unary(
                '/client.ClientService/GetPrice',
                request_serializer=client__pb2.GetPriceRequest.SerializeToString,
                response_deserializer=client__pb2.GetPriceResponse.FromString,
                _registered_method=True)
        self.GetClusterInfo = channel.unary_unary(
                '/client.ClientService/GetClusterInfo',
                request_serializer=client__pb2.GetClusterInfoRequest.SerializeToString,
                response_deserializer=client__pb2.GetClusterInfoResponse.FromString,
                _registered_method=True)


class ClientServiceServicer(object):
    """Client API service
    """

    def PutPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPutPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.PutPrice,
                    request_deserializer=client__pb2.PutPriceRequest.FromString,
                    response_serializer=client__pb2.PutPriceResponse.SerializeToString,
            ),
            'BatchPutPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPutPrice,
                    request_deserializer=client__pb2.BatchPutPriceRequest.FromString,
                    response_serializer=client__pb2.BatchPutPriceResponse.SerializeToString,
            ),
            'GetPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrice,
                    request_deserializer=client__pb2.GetPriceRequest.FromString,
                    response_serializer=client__pb2.GetPriceResponse.SerializeToString,
            ),
            'GetClusterInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterInfo,
                    request_deserializer=client__pb2.GetClusterInfoRequest.FromString,
                    response_serializer=client__pb2.GetClusterInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'client.ClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('client.ClientService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientService(object):
    """Client API service
    """

    @staticmethod
    def PutPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/client.ClientService/PutPrice',
            client__pb2.PutPriceRequest.SerializeToString,
            client__pb2.PutPriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchPutPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/client.ClientService/BatchPutPrice',
            client__pb2.BatchPutPriceRequest.SerializeToString,
            client__pb2.BatchPutPriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/client.ClientService/GetPrice',
            client__pb2.GetPriceRequest.SerializeToString,
            client__pb2.GetPriceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/client.ClientService/GetClusterInfo',
            client__pb2.GetClusterInfoRequest.SerializeToString,
            client__pb2.GetClusterInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
