syntax = "proto3";

package raft;

// Raft RPC service
service RaftService {
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}

// RequestVote RPC
message RequestVoteRequest {
    uint64 term = 1;           // candidate's term
    string candidate_id = 2;   // candidate requesting vote
    uint64 last_log_index = 3; // index of candidate's last log entry
    uint64 last_log_term = 4;  // term of candidate's last log entry
}

message RequestVoteResponse {
    uint64 term = 1;        // current term, for candidate to update itself
    bool vote_granted = 2;  // true means candidate received vote
}

// AppendEntries RPC
message AppendEntriesRequest {
    uint64 term = 1;              // leader's term
    string leader_id = 2;         // so follower can redirect clients
    uint64 prev_log_index = 3;    // index of log entry immediately preceding new ones
    uint64 prev_log_term = 4;     // term of prev_log_index entry
    repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
    uint64 leader_commit = 6;     // leader's commit_index
}

message AppendEntriesResponse {
    uint64 term = 1;        // current term, for leader to update itself
    bool success = 2;       // true if follower contained entry matching prev_log_index and prev_log_term
    uint64 match_index = 3; // highest log entry index that matches leader's log
}

// Log entry structure
message LogEntry {
    uint64 index = 1;        // log entry index
    uint64 term = 2;         // term when entry was received by leader
    bytes command_bytes = 3; // serialized command for state machine
}
