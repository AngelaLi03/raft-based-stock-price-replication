syntax = "proto3";

package client;

// Client API service
service ClientService {
    rpc PutPrice(PutPriceRequest) returns (PutPriceResponse);
    rpc BatchPutPrice(BatchPutPriceRequest) returns (BatchPutPriceResponse);
    rpc GetPrice(GetPriceRequest) returns (GetPriceResponse);
    rpc GetClusterInfo(GetClusterInfoRequest) returns (GetClusterInfoResponse);
    rpc DumpState(DumpStateRequest) returns (DumpStateResponse);
}

// Stock price data
message TickerPrice {
    string symbol = 1;    // stock symbol (e.g., "AAPL", "NVDA")
    double price = 2;     // current price
    int64 timestamp = 3;  // unix timestamp in milliseconds
}

// PutPrice request/response
message PutPriceRequest {
    TickerPrice ticker_price = 1;
}

message PutPriceResponse {
    bool ok = 1;                    // true if operation succeeded
    string leader_hint = 2;         // current leader ID if not leader
    string error_message = 3;       // error description if ok=false
}

// BatchPutPrice request/response
message BatchPutPriceRequest {
    repeated TickerPrice ticker_prices = 1;
}

message BatchPutPriceResponse {
    bool ok = 1;
    string leader_hint = 2;
    string error_message = 3;
}

// GetPrice request/response
message GetPriceRequest {
    string symbol = 1;
}

message GetPriceResponse {
    TickerPrice ticker_price = 1;
    bool found = 2;                 // true if price was found
    string error_message = 3;       // error description if found=false
}

// Cluster info request/response
message GetClusterInfoRequest {
    // Empty request
}

message GetClusterInfoResponse {
    string leader_id = 1;           // current leader ID
    uint64 term = 2;                // current term
    repeated string members = 3;    // list of cluster member IDs
    string node_id = 4;             // ID of the node responding
    string role = 5;                // "leader", "follower", or "candidate"
}

// DumpState request/response
message DumpStateRequest {
    // Empty request
}

message DumpStateResponse {
    bool ok = 1;                    // true if operation succeeded
    string error_message = 2;       // error description if ok=false
    
    // Node state
    string node_id = 3;             // node ID
    uint64 current_term = 4;        // current term
    string state = 5;               // current state
    uint64 commit_index = 6;        // commit index
    uint64 last_applied = 7;        // last applied index
    uint64 log_length = 8;          // log length
    uint64 kv_entries = 9;          // number of KV entries
    
    // KV store contents
    repeated TickerPrice kv_store = 10;
    
    // Metrics
    RaftMetrics metrics = 11;
}

// Raft metrics
message RaftMetrics {
    uint64 elections_total = 1;
    double election_duration_ms = 2;
    uint64 entries_replicated_total = 3;
    double replication_latency_ms = 4;
    uint64 replication_failures_total = 5;
    uint64 commits_total = 6;
    double commit_latency_ms = 7;
    uint64 crash_recoveries_total = 8;
    uint64 replay_entries_total = 9;
    double snapshot_load_time_ms = 10;
    double catchup_latency_ms = 11;
    uint64 log_entries_total = 12;
    uint64 storage_writes_total = 13;
    uint64 storage_reads_total = 14;
    uint64 commands_applied_total = 15;
    uint64 kv_entries_total = 16;
}
